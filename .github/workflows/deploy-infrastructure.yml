name: Deploy Infrastructure and Backend

on:
  push:
    branches: [ master ]
    paths:
      - 'terraform/**'
      - 'src/**'
      - 'Dockerfile'
      - '.github/workflows/deploy-infrastructure.yml'

env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: budgeteer-repo
  TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_jwt_expires_in: ${{ secrets.JWT_EXPIRES_IN }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        working-directory: terraform
    
    outputs:
      terraform-changed: ${{ steps.plan.outputs.terraform-changed }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -detailed-exitcode -no-color -out=tfplan
        echo "terraform-changed=$?" >> $GITHUB_OUTPUT
      continue-on-error: true

    - name: Save Terraform Plan
      if: steps.plan.outputs.terraform-changed == '2'
      uses: actions/upload-artifact@v4
      with:
        name: terraform-plan
        path: terraform/tfplan
        retention-days: 1

    - name: Comment Plan on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
      with:
        script: |
          const output = `### Terraform Plan ðŸ“‹
          
          \`\`\`
          ${process.env.PLAN}
          \`\`\`
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    environment: production
    needs: terraform-plan
    if: needs.terraform-plan.outputs.terraform-changed == '2'
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Download Terraform Plan
      uses: actions/download-artifact@v4
      with:
        name: terraform-plan
        path: terraform/

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: terraform apply -auto-approve tfplan

    - name: Get Terraform Outputs
      id: terraform-outputs
      run: |
        echo "cluster-name=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_OUTPUT
        echo "service-name=$(terraform output -raw ecs_service_name)" >> $GITHUB_OUTPUT
        echo "api-base-url=$(terraform output -raw api_base_url)" >> $GITHUB_OUTPUT

  build-and-deploy:
    name: Build and Deploy Application
    runs-on: ubuntu-latest
    environment: production
    needs: [terraform-plan, terraform-apply]
    if: always() && (needs.terraform-apply.result == 'success' || needs.terraform-apply.result == 'skipped')

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "Building Docker image..."
        docker build --platform linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "Pushing Docker image..."
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Get ECS cluster and service info
      id: ecs-info
      run: |
        cd terraform
        terraform init
        echo "cluster-name=$(terraform output -raw ecs_cluster_name 2>/dev/null || echo 'budgeteer')" >> $GITHUB_OUTPUT
        echo "service-name=$(terraform output -raw ecs_service_name 2>/dev/null || echo 'budgeteer')" >> $GITHUB_OUTPUT

    - name: Force ECS service update
      env:
        CLUSTER_NAME: ${{ steps.ecs-info.outputs.cluster-name }}
        SERVICE_NAME: ${{ steps.ecs-info.outputs.service-name }}
      run: |
        echo "Forcing ECS service deployment for cluster: $CLUSTER_NAME, service: $SERVICE_NAME"
        aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force-new-deployment

    - name: Wait for service stability
      env:
        CLUSTER_NAME: ${{ steps.ecs-info.outputs.cluster-name }}
        SERVICE_NAME: ${{ steps.ecs-info.outputs.service-name }}
      run: |
        echo "Waiting for ECS service to stabilize..."
        aws ecs wait services-stable --cluster $CLUSTER_NAME --services $SERVICE_NAME
        echo "Deployment completed successfully!"

name: Manual Terraform

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'master'
        type: string
      action:
        description: 'Terraform action'
        required: true
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: ap-southeast-2
  TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_jwt_expires_in: ${{ secrets.JWT_EXPIRES_IN }}

jobs:
  terraform:
    name: Terraform ${{ inputs.action }} (${{ inputs.branch }})
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.branch }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify AWS credentials
      run: |
        echo "AWS Region: $AWS_REGION"
        aws sts get-caller-identity

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Format
      run: terraform fmt

    - name: Terraform Validate
      if: inputs.action != 'destroy'
      run: terraform validate

    - name: Terraform Plan
      if: inputs.action == 'plan'
      run: terraform plan

    - name: Terraform Apply (ignore existing resource errors)
      if: inputs.action == 'apply'
      run: |
        echo "🚀 Applying Terraform changes (ignoring existing resource conflicts)..."
        terraform plan -out=tfplan
        terraform apply -auto-approve tfplan || {
          echo "⚠️ Apply encountered errors - checking if they're just existing resource conflicts..."
          terraform apply -auto-approve tfplan 2>&1 | tee apply_output.log
          
          # Check if errors are only about existing resources
          if grep -q "EntityAlreadyExists\|AlreadyExists\|already exists" apply_output.log; then
            echo "✅ Errors appear to be existing resource conflicts - this is expected during state sync"
            echo "💡 You may want to run 'terraform import' for these resources or remove them manually"
            exit 0
          else
            echo "❌ Apply failed with non-recoverable errors"
            cat apply_output.log
            exit 1
          fi
        }

    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve

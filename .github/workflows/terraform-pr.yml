name: Terraform Plan on PR

on:
  pull_request:
    branches: [ master ]
    paths:
      - 'terraform/**'
      - '.github/workflows/terraform-pr.yml'

env:
  AWS_REGION: ap-southeast-2
  TF_VAR_mongodb_uri: ${{ secrets.MONGODB_URI }}
  TF_VAR_jwt_secret: ${{ secrets.JWT_SECRET }}
  TF_VAR_jwt_expires_in: ${{ secrets.JWT_EXPIRES_IN }}

jobs:
  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.5.0

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Format Check
      run: terraform fmt -check

    - name: Terraform Plan
      id: plan
      run: |
        terraform plan -no-color -detailed-exitcode
      continue-on-error: true

    - name: Comment Plan on PR
      uses: actions/github-script@v7
      env:
        PLAN: ${{ steps.plan.outputs.stdout }}
        EXIT_CODE: ${{ steps.plan.outputs.exitcode }}
      with:
        script: |
          const plan = process.env.PLAN;
          const exitCode = process.env.EXIT_CODE;
          
          let summary = '';
          if (exitCode === '0') {
            summary = '‚úÖ **No changes** - Terraform configuration is up to date';
          } else if (exitCode === '2') {
            summary = 'üìã **Changes detected** - Terraform will make changes';
          } else {
            summary = '‚ùå **Plan failed** - Please check the configuration';
          }
          
          const output = `### Terraform Plan Results
          
          ${summary}
          
          <details>
          <summary>Show Plan Details</summary>
          
          \`\`\`terraform
          ${plan}
          \`\`\`
          
          </details>
          
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Terraform Plan Results')
          );
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            });
          } else {
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
          }

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
